//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace TripiTrafficMap.TrafficServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrafficQuery", Namespace="http://schemas.datacontract.org/2004/07/TrafficLibrary")]
    public partial class TrafficQuery : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime DateField;
        
        private double LatitudeField;
        
        private double LongitudeField;
        
        private int QueryIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QueryId {
            get {
                return this.QueryIdField;
            }
            set {
                if ((this.QueryIdField.Equals(value) != true)) {
                    this.QueryIdField = value;
                    this.RaisePropertyChanged("QueryId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrafficQueryResult", Namespace="http://schemas.datacontract.org/2004/07/TrafficLibrary")]
    public partial class TrafficQueryResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private TripiTrafficMap.TrafficServiceReference.EstimationPoint PointField;
        
        private int QueryIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TripiTrafficMap.TrafficServiceReference.EstimationPoint Point {
            get {
                return this.PointField;
            }
            set {
                if ((object.ReferenceEquals(this.PointField, value) != true)) {
                    this.PointField = value;
                    this.RaisePropertyChanged("Point");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QueryId {
            get {
                return this.QueryIdField;
            }
            set {
                if ((this.QueryIdField.Equals(value) != true)) {
                    this.QueryIdField = value;
                    this.RaisePropertyChanged("QueryId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EstimationPoint", Namespace="http://schemas.datacontract.org/2004/07/TrafficLibrary")]
    public partial class EstimationPoint : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime DateField;
        
        private double LatitudeField;
        
        private double LongitudeField;
        
        private double SpeedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Speed {
            get {
                return this.SpeedField;
            }
            set {
                if ((this.SpeedField.Equals(value) != true)) {
                    this.SpeedField = value;
                    this.RaisePropertyChanged("Speed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TrafficServiceReference.ITrafficService")]
    public interface ITrafficService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficService/GetEstimationPoint", ReplyAction="http://tempuri.org/ITrafficService/GetEstimationPointResponse")]
        System.IAsyncResult BeginGetEstimationPoint(TripiTrafficMap.TrafficServiceReference.TrafficQuery query, System.AsyncCallback callback, object asyncState);
        
        TripiTrafficMap.TrafficServiceReference.TrafficQueryResult EndGetEstimationPoint(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrafficServiceChannel : TripiTrafficMap.TrafficServiceReference.ITrafficService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEstimationPointCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEstimationPointCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TripiTrafficMap.TrafficServiceReference.TrafficQueryResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TripiTrafficMap.TrafficServiceReference.TrafficQueryResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrafficServiceClient : System.ServiceModel.ClientBase<TripiTrafficMap.TrafficServiceReference.ITrafficService>, TripiTrafficMap.TrafficServiceReference.ITrafficService {
        
        private BeginOperationDelegate onBeginGetEstimationPointDelegate;
        
        private EndOperationDelegate onEndGetEstimationPointDelegate;
        
        private System.Threading.SendOrPostCallback onGetEstimationPointCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TrafficServiceClient() {
        }
        
        public TrafficServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TrafficServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TrafficServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TrafficServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetEstimationPointCompletedEventArgs> GetEstimationPointCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TripiTrafficMap.TrafficServiceReference.ITrafficService.BeginGetEstimationPoint(TripiTrafficMap.TrafficServiceReference.TrafficQuery query, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEstimationPoint(query, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TripiTrafficMap.TrafficServiceReference.TrafficQueryResult TripiTrafficMap.TrafficServiceReference.ITrafficService.EndGetEstimationPoint(System.IAsyncResult result) {
            return base.Channel.EndGetEstimationPoint(result);
        }
        
        private System.IAsyncResult OnBeginGetEstimationPoint(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TripiTrafficMap.TrafficServiceReference.TrafficQuery query = ((TripiTrafficMap.TrafficServiceReference.TrafficQuery)(inValues[0]));
            return ((TripiTrafficMap.TrafficServiceReference.ITrafficService)(this)).BeginGetEstimationPoint(query, callback, asyncState);
        }
        
        private object[] OnEndGetEstimationPoint(System.IAsyncResult result) {
            TripiTrafficMap.TrafficServiceReference.TrafficQueryResult retVal = ((TripiTrafficMap.TrafficServiceReference.ITrafficService)(this)).EndGetEstimationPoint(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEstimationPointCompleted(object state) {
            if ((this.GetEstimationPointCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEstimationPointCompleted(this, new GetEstimationPointCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEstimationPointAsync(TripiTrafficMap.TrafficServiceReference.TrafficQuery query) {
            this.GetEstimationPointAsync(query, null);
        }
        
        public void GetEstimationPointAsync(TripiTrafficMap.TrafficServiceReference.TrafficQuery query, object userState) {
            if ((this.onBeginGetEstimationPointDelegate == null)) {
                this.onBeginGetEstimationPointDelegate = new BeginOperationDelegate(this.OnBeginGetEstimationPoint);
            }
            if ((this.onEndGetEstimationPointDelegate == null)) {
                this.onEndGetEstimationPointDelegate = new EndOperationDelegate(this.OnEndGetEstimationPoint);
            }
            if ((this.onGetEstimationPointCompletedDelegate == null)) {
                this.onGetEstimationPointCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEstimationPointCompleted);
            }
            base.InvokeAsync(this.onBeginGetEstimationPointDelegate, new object[] {
                        query}, this.onEndGetEstimationPointDelegate, this.onGetEstimationPointCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TripiTrafficMap.TrafficServiceReference.ITrafficService CreateChannel() {
            return new TrafficServiceClientChannel(this);
        }
        
        private class TrafficServiceClientChannel : ChannelBase<TripiTrafficMap.TrafficServiceReference.ITrafficService>, TripiTrafficMap.TrafficServiceReference.ITrafficService {
            
            public TrafficServiceClientChannel(System.ServiceModel.ClientBase<TripiTrafficMap.TrafficServiceReference.ITrafficService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetEstimationPoint(TripiTrafficMap.TrafficServiceReference.TrafficQuery query, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = query;
                System.IAsyncResult _result = base.BeginInvoke("GetEstimationPoint", _args, callback, asyncState);
                return _result;
            }
            
            public TripiTrafficMap.TrafficServiceReference.TrafficQueryResult EndGetEstimationPoint(System.IAsyncResult result) {
                object[] _args = new object[0];
                TripiTrafficMap.TrafficServiceReference.TrafficQueryResult _result = ((TripiTrafficMap.TrafficServiceReference.TrafficQueryResult)(base.EndInvoke("GetEstimationPoint", _args, result)));
                return _result;
            }
        }
    }
}
