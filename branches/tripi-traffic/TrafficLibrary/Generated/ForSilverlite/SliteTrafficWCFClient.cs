//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:2.0.50727.4952
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by slsvcutil, version 3.0.40818.0
// 
namespace TrafficLibrary
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrafficQuery", Namespace="http://schemas.datacontract.org/2004/07/TrafficLibrary")]
    public partial class TrafficQuery : object
    {
        
        private System.DateTime DateField;
        
        private double LatitudeField;
        
        private double LongitudeField;
        
        private int QueryIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                this.DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude
        {
            get
            {
                return this.LatitudeField;
            }
            set
            {
                this.LatitudeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude
        {
            get
            {
                return this.LongitudeField;
            }
            set
            {
                this.LongitudeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QueryId
        {
            get
            {
                return this.QueryIdField;
            }
            set
            {
                this.QueryIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrafficQueryResult", Namespace="http://schemas.datacontract.org/2004/07/TrafficLibrary")]
    public partial class TrafficQueryResult : object
    {
        
        private TrafficLibrary.EstimationPoint PointField;
        
        private int QueryIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TrafficLibrary.EstimationPoint Point
        {
            get
            {
                return this.PointField;
            }
            set
            {
                this.PointField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QueryId
        {
            get
            {
                return this.QueryIdField;
            }
            set
            {
                this.QueryIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EstimationPoint", Namespace="http://schemas.datacontract.org/2004/07/TrafficLibrary")]
    public partial class EstimationPoint : object
    {
        
        private System.DateTime DateField;
        
        private double LatitudeField;
        
        private double LongitudeField;
        
        private double SpeedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                this.DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude
        {
            get
            {
                return this.LatitudeField;
            }
            set
            {
                this.LatitudeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude
        {
            get
            {
                return this.LongitudeField;
            }
            set
            {
                this.LongitudeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Speed
        {
            get
            {
                return this.SpeedField;
            }
            set
            {
                this.SpeedField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ITrafficService")]
public interface ITrafficService
{
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITrafficService/GetEstimationPoint", ReplyAction="http://tempuri.org/ITrafficService/GetEstimationPointResponse")]
    System.IAsyncResult BeginGetEstimationPoint(TrafficLibrary.TrafficQuery query, System.AsyncCallback callback, object asyncState);
    
    TrafficLibrary.TrafficQueryResult EndGetEstimationPoint(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface ITrafficServiceChannel : ITrafficService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class GetEstimationPointCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetEstimationPointCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public TrafficLibrary.TrafficQueryResult Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((TrafficLibrary.TrafficQueryResult)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class TrafficServiceClient : System.ServiceModel.ClientBase<ITrafficService>, ITrafficService
{
    
    private BeginOperationDelegate onBeginGetEstimationPointDelegate;
    
    private EndOperationDelegate onEndGetEstimationPointDelegate;
    
    private System.Threading.SendOrPostCallback onGetEstimationPointCompletedDelegate;
    
    private BeginOperationDelegate onBeginOpenDelegate;
    
    private EndOperationDelegate onEndOpenDelegate;
    
    private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
    
    private BeginOperationDelegate onBeginCloseDelegate;
    
    private EndOperationDelegate onEndCloseDelegate;
    
    private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
    
    public TrafficServiceClient()
    {
    }
    
    public TrafficServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public TrafficServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TrafficServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TrafficServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Net.CookieContainer CookieContainer
    {
        get
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                return httpCookieContainerManager.CookieContainer;
            }
            else
            {
                return null;
            }
        }
        set
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                httpCookieContainerManager.CookieContainer = value;
            }
            else
            {
                throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                        "ookieContainerBindingElement.");
            }
        }
    }
    
    public event System.EventHandler<GetEstimationPointCompletedEventArgs> GetEstimationPointCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ITrafficService.BeginGetEstimationPoint(TrafficLibrary.TrafficQuery query, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetEstimationPoint(query, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    TrafficLibrary.TrafficQueryResult ITrafficService.EndGetEstimationPoint(System.IAsyncResult result)
    {
        return base.Channel.EndGetEstimationPoint(result);
    }
    
    private System.IAsyncResult OnBeginGetEstimationPoint(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        TrafficLibrary.TrafficQuery query = ((TrafficLibrary.TrafficQuery)(inValues[0]));
        return ((ITrafficService)(this)).BeginGetEstimationPoint(query, callback, asyncState);
    }
    
    private object[] OnEndGetEstimationPoint(System.IAsyncResult result)
    {
        TrafficLibrary.TrafficQueryResult retVal = ((ITrafficService)(this)).EndGetEstimationPoint(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetEstimationPointCompleted(object state)
    {
        if ((this.GetEstimationPointCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetEstimationPointCompleted(this, new GetEstimationPointCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetEstimationPointAsync(TrafficLibrary.TrafficQuery query)
    {
        this.GetEstimationPointAsync(query, null);
    }
    
    public void GetEstimationPointAsync(TrafficLibrary.TrafficQuery query, object userState)
    {
        if ((this.onBeginGetEstimationPointDelegate == null))
        {
            this.onBeginGetEstimationPointDelegate = new BeginOperationDelegate(this.OnBeginGetEstimationPoint);
        }
        if ((this.onEndGetEstimationPointDelegate == null))
        {
            this.onEndGetEstimationPointDelegate = new EndOperationDelegate(this.OnEndGetEstimationPoint);
        }
        if ((this.onGetEstimationPointCompletedDelegate == null))
        {
            this.onGetEstimationPointCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEstimationPointCompleted);
        }
        base.InvokeAsync(this.onBeginGetEstimationPointDelegate, new object[] {
                    query}, this.onEndGetEstimationPointDelegate, this.onGetEstimationPointCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
    }
    
    private object[] OnEndOpen(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
        return null;
    }
    
    private void OnOpenCompleted(object state)
    {
        if ((this.OpenCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void OpenAsync()
    {
        this.OpenAsync(null);
    }
    
    public void OpenAsync(object userState)
    {
        if ((this.onBeginOpenDelegate == null))
        {
            this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
        }
        if ((this.onEndOpenDelegate == null))
        {
            this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
        }
        if ((this.onOpenCompletedDelegate == null))
        {
            this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
        }
        base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
    }
    
    private object[] OnEndClose(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
        return null;
    }
    
    private void OnCloseCompleted(object state)
    {
        if ((this.CloseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void CloseAsync()
    {
        this.CloseAsync(null);
    }
    
    public void CloseAsync(object userState)
    {
        if ((this.onBeginCloseDelegate == null))
        {
            this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
        }
        if ((this.onEndCloseDelegate == null))
        {
            this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
        }
        if ((this.onCloseCompletedDelegate == null))
        {
            this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
        }
        base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
    }
    
    protected override ITrafficService CreateChannel()
    {
        return new TrafficServiceClientChannel(this);
    }
    
    private class TrafficServiceClientChannel : ChannelBase<ITrafficService>, ITrafficService
    {
        
        public TrafficServiceClientChannel(System.ServiceModel.ClientBase<ITrafficService> client) : 
                base(client)
        {
        }
        
        public System.IAsyncResult BeginGetEstimationPoint(TrafficLibrary.TrafficQuery query, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = query;
            System.IAsyncResult _result = base.BeginInvoke("GetEstimationPoint", _args, callback, asyncState);
            return _result;
        }
        
        public TrafficLibrary.TrafficQueryResult EndGetEstimationPoint(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            TrafficLibrary.TrafficQueryResult _result = ((TrafficLibrary.TrafficQueryResult)(base.EndInvoke("GetEstimationPoint", _args, result)));
            return _result;
        }
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ICrossDomainPolicyResponder")]
public interface ICrossDomainPolicyResponder
{
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICrossDomainPolicyResponder/GetFlashPolicy", ReplyAction="http://tempuri.org/ICrossDomainPolicyResponder/GetFlashPolicyResponse")]
    System.IAsyncResult BeginGetFlashPolicy(System.AsyncCallback callback, object asyncState);
    
    byte[] EndGetFlashPolicy(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface ICrossDomainPolicyResponderChannel : ICrossDomainPolicyResponder, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class GetFlashPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetFlashPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public byte[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class CrossDomainPolicyResponderClient : System.ServiceModel.ClientBase<ICrossDomainPolicyResponder>, ICrossDomainPolicyResponder
{
    
    private BeginOperationDelegate onBeginGetFlashPolicyDelegate;
    
    private EndOperationDelegate onEndGetFlashPolicyDelegate;
    
    private System.Threading.SendOrPostCallback onGetFlashPolicyCompletedDelegate;
    
    private BeginOperationDelegate onBeginOpenDelegate;
    
    private EndOperationDelegate onEndOpenDelegate;
    
    private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
    
    private BeginOperationDelegate onBeginCloseDelegate;
    
    private EndOperationDelegate onEndCloseDelegate;
    
    private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
    
    public CrossDomainPolicyResponderClient()
    {
    }
    
    public CrossDomainPolicyResponderClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public CrossDomainPolicyResponderClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CrossDomainPolicyResponderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CrossDomainPolicyResponderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Net.CookieContainer CookieContainer
    {
        get
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                return httpCookieContainerManager.CookieContainer;
            }
            else
            {
                return null;
            }
        }
        set
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                httpCookieContainerManager.CookieContainer = value;
            }
            else
            {
                throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                        "ookieContainerBindingElement.");
            }
        }
    }
    
    public event System.EventHandler<GetFlashPolicyCompletedEventArgs> GetFlashPolicyCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ICrossDomainPolicyResponder.BeginGetFlashPolicy(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetFlashPolicy(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    byte[] ICrossDomainPolicyResponder.EndGetFlashPolicy(System.IAsyncResult result)
    {
        return base.Channel.EndGetFlashPolicy(result);
    }
    
    private System.IAsyncResult OnBeginGetFlashPolicy(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((ICrossDomainPolicyResponder)(this)).BeginGetFlashPolicy(callback, asyncState);
    }
    
    private object[] OnEndGetFlashPolicy(System.IAsyncResult result)
    {
        byte[] retVal = ((ICrossDomainPolicyResponder)(this)).EndGetFlashPolicy(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetFlashPolicyCompleted(object state)
    {
        if ((this.GetFlashPolicyCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetFlashPolicyCompleted(this, new GetFlashPolicyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetFlashPolicyAsync()
    {
        this.GetFlashPolicyAsync(null);
    }
    
    public void GetFlashPolicyAsync(object userState)
    {
        if ((this.onBeginGetFlashPolicyDelegate == null))
        {
            this.onBeginGetFlashPolicyDelegate = new BeginOperationDelegate(this.OnBeginGetFlashPolicy);
        }
        if ((this.onEndGetFlashPolicyDelegate == null))
        {
            this.onEndGetFlashPolicyDelegate = new EndOperationDelegate(this.OnEndGetFlashPolicy);
        }
        if ((this.onGetFlashPolicyCompletedDelegate == null))
        {
            this.onGetFlashPolicyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFlashPolicyCompleted);
        }
        base.InvokeAsync(this.onBeginGetFlashPolicyDelegate, null, this.onEndGetFlashPolicyDelegate, this.onGetFlashPolicyCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
    }
    
    private object[] OnEndOpen(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
        return null;
    }
    
    private void OnOpenCompleted(object state)
    {
        if ((this.OpenCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void OpenAsync()
    {
        this.OpenAsync(null);
    }
    
    public void OpenAsync(object userState)
    {
        if ((this.onBeginOpenDelegate == null))
        {
            this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
        }
        if ((this.onEndOpenDelegate == null))
        {
            this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
        }
        if ((this.onOpenCompletedDelegate == null))
        {
            this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
        }
        base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
    }
    
    private object[] OnEndClose(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
        return null;
    }
    
    private void OnCloseCompleted(object state)
    {
        if ((this.CloseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void CloseAsync()
    {
        this.CloseAsync(null);
    }
    
    public void CloseAsync(object userState)
    {
        if ((this.onBeginCloseDelegate == null))
        {
            this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
        }
        if ((this.onEndCloseDelegate == null))
        {
            this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
        }
        if ((this.onCloseCompletedDelegate == null))
        {
            this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
        }
        base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
    }
    
    protected override ICrossDomainPolicyResponder CreateChannel()
    {
        return new CrossDomainPolicyResponderClientChannel(this);
    }
    
    private class CrossDomainPolicyResponderClientChannel : ChannelBase<ICrossDomainPolicyResponder>, ICrossDomainPolicyResponder
    {
        
        public CrossDomainPolicyResponderClientChannel(System.ServiceModel.ClientBase<ICrossDomainPolicyResponder> client) : 
                base(client)
        {
        }
        
        public System.IAsyncResult BeginGetFlashPolicy(System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[0];
            System.IAsyncResult _result = base.BeginInvoke("GetFlashPolicy", _args, callback, asyncState);
            return _result;
        }
        
        public byte[] EndGetFlashPolicy(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            byte[] _result = ((byte[])(base.EndInvoke("GetFlashPolicy", _args, result)));
            return _result;
        }
    }
}
