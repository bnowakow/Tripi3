//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by slsvcutil, version 3.0.40818.0
// 
namespace TripiWCF.Service
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Trip", Namespace="http://schemas.datacontract.org/2004/07/TripiWCF.Service")]
    public partial class Trip : object
    {
        
        private int IDField;
        
        private string TripNameField;
        
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                this.IDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TripName
        {
            get
            {
                return this.TripNameField;
            }
            set
            {
                this.TripNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username
        {
            get
            {
                return this.UsernameField;
            }
            set
            {
                this.UsernameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PositionNode", Namespace="http://schemas.datacontract.org/2004/07/TripiWCF.Service")]
    public partial class PositionNode : object
    {
        
        private System.DateTime CreationTimeField;
        
        private double LatitudeField;
        
        private double LongitudeField;
        
        private double SpeedField;
        
        private int TripIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationTime
        {
            get
            {
                return this.CreationTimeField;
            }
            set
            {
                this.CreationTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude
        {
            get
            {
                return this.LatitudeField;
            }
            set
            {
                this.LatitudeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude
        {
            get
            {
                return this.LongitudeField;
            }
            set
            {
                this.LongitudeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Speed
        {
            get
            {
                return this.SpeedField;
            }
            set
            {
                this.SpeedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TripID
        {
            get
            {
                return this.TripIDField;
            }
            set
            {
                this.TripIDField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ITripService")]
public interface ITripService
{
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITripService/LoginUser", ReplyAction="http://tempuri.org/ITripService/LoginUserResponse")]
    System.IAsyncResult BeginLoginUser(string username, string password, System.AsyncCallback callback, object asyncState);
    
    string EndLoginUser(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITripService/CreateNewTrip", ReplyAction="http://tempuri.org/ITripService/CreateNewTripResponse")]
    System.IAsyncResult BeginCreateNewTrip(string username, string tripName, System.AsyncCallback callback, object asyncState);
    
    int EndCreateNewTrip(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITripService/GetAllTrips", ReplyAction="http://tempuri.org/ITripService/GetAllTripsResponse")]
    System.IAsyncResult BeginGetAllTrips(System.AsyncCallback callback, object asyncState);
    
    TripiWCF.Service.Trip[] EndGetAllTrips(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITripService/GetTripsForUser", ReplyAction="http://tempuri.org/ITripService/GetTripsForUserResponse")]
    System.IAsyncResult BeginGetTripsForUser(string username, System.AsyncCallback callback, object asyncState);
    
    TripiWCF.Service.Trip[] EndGetTripsForUser(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITripService/GetPositionNodesForTrip", ReplyAction="http://tempuri.org/ITripService/GetPositionNodesForTripResponse")]
    System.IAsyncResult BeginGetPositionNodesForTrip(int tripID, System.AsyncCallback callback, object asyncState);
    
    TripiWCF.Service.PositionNode[] EndGetPositionNodesForTrip(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITripService/AddPositionNode", ReplyAction="http://tempuri.org/ITripService/AddPositionNodeResponse")]
    System.IAsyncResult BeginAddPositionNode(TripiWCF.Service.PositionNode node, System.AsyncCallback callback, object asyncState);
    
    void EndAddPositionNode(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface ITripServiceChannel : ITripService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class LoginUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public LoginUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public string Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class CreateNewTripCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public CreateNewTripCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public int Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class GetAllTripsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetAllTripsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public TripiWCF.Service.Trip[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((TripiWCF.Service.Trip[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class GetTripsForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetTripsForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public TripiWCF.Service.Trip[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((TripiWCF.Service.Trip[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class GetPositionNodesForTripCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetPositionNodesForTripCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public TripiWCF.Service.PositionNode[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((TripiWCF.Service.PositionNode[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class TripServiceClient : System.ServiceModel.ClientBase<ITripService>, ITripService
{
    
    private BeginOperationDelegate onBeginLoginUserDelegate;
    
    private EndOperationDelegate onEndLoginUserDelegate;
    
    private System.Threading.SendOrPostCallback onLoginUserCompletedDelegate;
    
    private BeginOperationDelegate onBeginCreateNewTripDelegate;
    
    private EndOperationDelegate onEndCreateNewTripDelegate;
    
    private System.Threading.SendOrPostCallback onCreateNewTripCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetAllTripsDelegate;
    
    private EndOperationDelegate onEndGetAllTripsDelegate;
    
    private System.Threading.SendOrPostCallback onGetAllTripsCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetTripsForUserDelegate;
    
    private EndOperationDelegate onEndGetTripsForUserDelegate;
    
    private System.Threading.SendOrPostCallback onGetTripsForUserCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetPositionNodesForTripDelegate;
    
    private EndOperationDelegate onEndGetPositionNodesForTripDelegate;
    
    private System.Threading.SendOrPostCallback onGetPositionNodesForTripCompletedDelegate;
    
    private BeginOperationDelegate onBeginAddPositionNodeDelegate;
    
    private EndOperationDelegate onEndAddPositionNodeDelegate;
    
    private System.Threading.SendOrPostCallback onAddPositionNodeCompletedDelegate;
    
    private BeginOperationDelegate onBeginOpenDelegate;
    
    private EndOperationDelegate onEndOpenDelegate;
    
    private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
    
    private BeginOperationDelegate onBeginCloseDelegate;
    
    private EndOperationDelegate onEndCloseDelegate;
    
    private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
    
    public TripServiceClient()
    {
    }
    
    public TripServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public TripServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TripServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public TripServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Net.CookieContainer CookieContainer
    {
        get
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                return httpCookieContainerManager.CookieContainer;
            }
            else
            {
                return null;
            }
        }
        set
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                httpCookieContainerManager.CookieContainer = value;
            }
            else
            {
                throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                        "ookieContainerBindingElement.");
            }
        }
    }
    
    public event System.EventHandler<LoginUserCompletedEventArgs> LoginUserCompleted;
    
    public event System.EventHandler<CreateNewTripCompletedEventArgs> CreateNewTripCompleted;
    
    public event System.EventHandler<GetAllTripsCompletedEventArgs> GetAllTripsCompleted;
    
    public event System.EventHandler<GetTripsForUserCompletedEventArgs> GetTripsForUserCompleted;
    
    public event System.EventHandler<GetPositionNodesForTripCompletedEventArgs> GetPositionNodesForTripCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddPositionNodeCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ITripService.BeginLoginUser(string username, string password, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginLoginUser(username, password, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    string ITripService.EndLoginUser(System.IAsyncResult result)
    {
        return base.Channel.EndLoginUser(result);
    }
    
    private System.IAsyncResult OnBeginLoginUser(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string username = ((string)(inValues[0]));
        string password = ((string)(inValues[1]));
        return ((ITripService)(this)).BeginLoginUser(username, password, callback, asyncState);
    }
    
    private object[] OnEndLoginUser(System.IAsyncResult result)
    {
        string retVal = ((ITripService)(this)).EndLoginUser(result);
        return new object[] {
                retVal};
    }
    
    private void OnLoginUserCompleted(object state)
    {
        if ((this.LoginUserCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.LoginUserCompleted(this, new LoginUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void LoginUserAsync(string username, string password)
    {
        this.LoginUserAsync(username, password, null);
    }
    
    public void LoginUserAsync(string username, string password, object userState)
    {
        if ((this.onBeginLoginUserDelegate == null))
        {
            this.onBeginLoginUserDelegate = new BeginOperationDelegate(this.OnBeginLoginUser);
        }
        if ((this.onEndLoginUserDelegate == null))
        {
            this.onEndLoginUserDelegate = new EndOperationDelegate(this.OnEndLoginUser);
        }
        if ((this.onLoginUserCompletedDelegate == null))
        {
            this.onLoginUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginUserCompleted);
        }
        base.InvokeAsync(this.onBeginLoginUserDelegate, new object[] {
                    username,
                    password}, this.onEndLoginUserDelegate, this.onLoginUserCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ITripService.BeginCreateNewTrip(string username, string tripName, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginCreateNewTrip(username, tripName, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    int ITripService.EndCreateNewTrip(System.IAsyncResult result)
    {
        return base.Channel.EndCreateNewTrip(result);
    }
    
    private System.IAsyncResult OnBeginCreateNewTrip(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string username = ((string)(inValues[0]));
        string tripName = ((string)(inValues[1]));
        return ((ITripService)(this)).BeginCreateNewTrip(username, tripName, callback, asyncState);
    }
    
    private object[] OnEndCreateNewTrip(System.IAsyncResult result)
    {
        int retVal = ((ITripService)(this)).EndCreateNewTrip(result);
        return new object[] {
                retVal};
    }
    
    private void OnCreateNewTripCompleted(object state)
    {
        if ((this.CreateNewTripCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CreateNewTripCompleted(this, new CreateNewTripCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void CreateNewTripAsync(string username, string tripName)
    {
        this.CreateNewTripAsync(username, tripName, null);
    }
    
    public void CreateNewTripAsync(string username, string tripName, object userState)
    {
        if ((this.onBeginCreateNewTripDelegate == null))
        {
            this.onBeginCreateNewTripDelegate = new BeginOperationDelegate(this.OnBeginCreateNewTrip);
        }
        if ((this.onEndCreateNewTripDelegate == null))
        {
            this.onEndCreateNewTripDelegate = new EndOperationDelegate(this.OnEndCreateNewTrip);
        }
        if ((this.onCreateNewTripCompletedDelegate == null))
        {
            this.onCreateNewTripCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateNewTripCompleted);
        }
        base.InvokeAsync(this.onBeginCreateNewTripDelegate, new object[] {
                    username,
                    tripName}, this.onEndCreateNewTripDelegate, this.onCreateNewTripCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ITripService.BeginGetAllTrips(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetAllTrips(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    TripiWCF.Service.Trip[] ITripService.EndGetAllTrips(System.IAsyncResult result)
    {
        return base.Channel.EndGetAllTrips(result);
    }
    
    private System.IAsyncResult OnBeginGetAllTrips(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((ITripService)(this)).BeginGetAllTrips(callback, asyncState);
    }
    
    private object[] OnEndGetAllTrips(System.IAsyncResult result)
    {
        TripiWCF.Service.Trip[] retVal = ((ITripService)(this)).EndGetAllTrips(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetAllTripsCompleted(object state)
    {
        if ((this.GetAllTripsCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetAllTripsCompleted(this, new GetAllTripsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetAllTripsAsync()
    {
        this.GetAllTripsAsync(null);
    }
    
    public void GetAllTripsAsync(object userState)
    {
        if ((this.onBeginGetAllTripsDelegate == null))
        {
            this.onBeginGetAllTripsDelegate = new BeginOperationDelegate(this.OnBeginGetAllTrips);
        }
        if ((this.onEndGetAllTripsDelegate == null))
        {
            this.onEndGetAllTripsDelegate = new EndOperationDelegate(this.OnEndGetAllTrips);
        }
        if ((this.onGetAllTripsCompletedDelegate == null))
        {
            this.onGetAllTripsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllTripsCompleted);
        }
        base.InvokeAsync(this.onBeginGetAllTripsDelegate, null, this.onEndGetAllTripsDelegate, this.onGetAllTripsCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ITripService.BeginGetTripsForUser(string username, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetTripsForUser(username, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    TripiWCF.Service.Trip[] ITripService.EndGetTripsForUser(System.IAsyncResult result)
    {
        return base.Channel.EndGetTripsForUser(result);
    }
    
    private System.IAsyncResult OnBeginGetTripsForUser(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        string username = ((string)(inValues[0]));
        return ((ITripService)(this)).BeginGetTripsForUser(username, callback, asyncState);
    }
    
    private object[] OnEndGetTripsForUser(System.IAsyncResult result)
    {
        TripiWCF.Service.Trip[] retVal = ((ITripService)(this)).EndGetTripsForUser(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetTripsForUserCompleted(object state)
    {
        if ((this.GetTripsForUserCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetTripsForUserCompleted(this, new GetTripsForUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetTripsForUserAsync(string username)
    {
        this.GetTripsForUserAsync(username, null);
    }
    
    public void GetTripsForUserAsync(string username, object userState)
    {
        if ((this.onBeginGetTripsForUserDelegate == null))
        {
            this.onBeginGetTripsForUserDelegate = new BeginOperationDelegate(this.OnBeginGetTripsForUser);
        }
        if ((this.onEndGetTripsForUserDelegate == null))
        {
            this.onEndGetTripsForUserDelegate = new EndOperationDelegate(this.OnEndGetTripsForUser);
        }
        if ((this.onGetTripsForUserCompletedDelegate == null))
        {
            this.onGetTripsForUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTripsForUserCompleted);
        }
        base.InvokeAsync(this.onBeginGetTripsForUserDelegate, new object[] {
                    username}, this.onEndGetTripsForUserDelegate, this.onGetTripsForUserCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ITripService.BeginGetPositionNodesForTrip(int tripID, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetPositionNodesForTrip(tripID, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    TripiWCF.Service.PositionNode[] ITripService.EndGetPositionNodesForTrip(System.IAsyncResult result)
    {
        return base.Channel.EndGetPositionNodesForTrip(result);
    }
    
    private System.IAsyncResult OnBeginGetPositionNodesForTrip(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        int tripID = ((int)(inValues[0]));
        return ((ITripService)(this)).BeginGetPositionNodesForTrip(tripID, callback, asyncState);
    }
    
    private object[] OnEndGetPositionNodesForTrip(System.IAsyncResult result)
    {
        TripiWCF.Service.PositionNode[] retVal = ((ITripService)(this)).EndGetPositionNodesForTrip(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetPositionNodesForTripCompleted(object state)
    {
        if ((this.GetPositionNodesForTripCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetPositionNodesForTripCompleted(this, new GetPositionNodesForTripCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetPositionNodesForTripAsync(int tripID)
    {
        this.GetPositionNodesForTripAsync(tripID, null);
    }
    
    public void GetPositionNodesForTripAsync(int tripID, object userState)
    {
        if ((this.onBeginGetPositionNodesForTripDelegate == null))
        {
            this.onBeginGetPositionNodesForTripDelegate = new BeginOperationDelegate(this.OnBeginGetPositionNodesForTrip);
        }
        if ((this.onEndGetPositionNodesForTripDelegate == null))
        {
            this.onEndGetPositionNodesForTripDelegate = new EndOperationDelegate(this.OnEndGetPositionNodesForTrip);
        }
        if ((this.onGetPositionNodesForTripCompletedDelegate == null))
        {
            this.onGetPositionNodesForTripCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPositionNodesForTripCompleted);
        }
        base.InvokeAsync(this.onBeginGetPositionNodesForTripDelegate, new object[] {
                    tripID}, this.onEndGetPositionNodesForTripDelegate, this.onGetPositionNodesForTripCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ITripService.BeginAddPositionNode(TripiWCF.Service.PositionNode node, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginAddPositionNode(node, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    void ITripService.EndAddPositionNode(System.IAsyncResult result)
    {
        base.Channel.EndAddPositionNode(result);
    }
    
    private System.IAsyncResult OnBeginAddPositionNode(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        TripiWCF.Service.PositionNode node = ((TripiWCF.Service.PositionNode)(inValues[0]));
        return ((ITripService)(this)).BeginAddPositionNode(node, callback, asyncState);
    }
    
    private object[] OnEndAddPositionNode(System.IAsyncResult result)
    {
        ((ITripService)(this)).EndAddPositionNode(result);
        return null;
    }
    
    private void OnAddPositionNodeCompleted(object state)
    {
        if ((this.AddPositionNodeCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.AddPositionNodeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void AddPositionNodeAsync(TripiWCF.Service.PositionNode node)
    {
        this.AddPositionNodeAsync(node, null);
    }
    
    public void AddPositionNodeAsync(TripiWCF.Service.PositionNode node, object userState)
    {
        if ((this.onBeginAddPositionNodeDelegate == null))
        {
            this.onBeginAddPositionNodeDelegate = new BeginOperationDelegate(this.OnBeginAddPositionNode);
        }
        if ((this.onEndAddPositionNodeDelegate == null))
        {
            this.onEndAddPositionNodeDelegate = new EndOperationDelegate(this.OnEndAddPositionNode);
        }
        if ((this.onAddPositionNodeCompletedDelegate == null))
        {
            this.onAddPositionNodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddPositionNodeCompleted);
        }
        base.InvokeAsync(this.onBeginAddPositionNodeDelegate, new object[] {
                    node}, this.onEndAddPositionNodeDelegate, this.onAddPositionNodeCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
    }
    
    private object[] OnEndOpen(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
        return null;
    }
    
    private void OnOpenCompleted(object state)
    {
        if ((this.OpenCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void OpenAsync()
    {
        this.OpenAsync(null);
    }
    
    public void OpenAsync(object userState)
    {
        if ((this.onBeginOpenDelegate == null))
        {
            this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
        }
        if ((this.onEndOpenDelegate == null))
        {
            this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
        }
        if ((this.onOpenCompletedDelegate == null))
        {
            this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
        }
        base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
    }
    
    private object[] OnEndClose(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
        return null;
    }
    
    private void OnCloseCompleted(object state)
    {
        if ((this.CloseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void CloseAsync()
    {
        this.CloseAsync(null);
    }
    
    public void CloseAsync(object userState)
    {
        if ((this.onBeginCloseDelegate == null))
        {
            this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
        }
        if ((this.onEndCloseDelegate == null))
        {
            this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
        }
        if ((this.onCloseCompletedDelegate == null))
        {
            this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
        }
        base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
    }
    
    protected override ITripService CreateChannel()
    {
        return new TripServiceClientChannel(this);
    }
    
    private class TripServiceClientChannel : ChannelBase<ITripService>, ITripService
    {
        
        public TripServiceClientChannel(System.ServiceModel.ClientBase<ITripService> client) : 
                base(client)
        {
        }
        
        public System.IAsyncResult BeginLoginUser(string username, string password, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = username;
            _args[1] = password;
            System.IAsyncResult _result = base.BeginInvoke("LoginUser", _args, callback, asyncState);
            return _result;
        }
        
        public string EndLoginUser(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            string _result = ((string)(base.EndInvoke("LoginUser", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginCreateNewTrip(string username, string tripName, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[2];
            _args[0] = username;
            _args[1] = tripName;
            System.IAsyncResult _result = base.BeginInvoke("CreateNewTrip", _args, callback, asyncState);
            return _result;
        }
        
        public int EndCreateNewTrip(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            int _result = ((int)(base.EndInvoke("CreateNewTrip", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetAllTrips(System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[0];
            System.IAsyncResult _result = base.BeginInvoke("GetAllTrips", _args, callback, asyncState);
            return _result;
        }
        
        public TripiWCF.Service.Trip[] EndGetAllTrips(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            TripiWCF.Service.Trip[] _result = ((TripiWCF.Service.Trip[])(base.EndInvoke("GetAllTrips", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetTripsForUser(string username, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = username;
            System.IAsyncResult _result = base.BeginInvoke("GetTripsForUser", _args, callback, asyncState);
            return _result;
        }
        
        public TripiWCF.Service.Trip[] EndGetTripsForUser(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            TripiWCF.Service.Trip[] _result = ((TripiWCF.Service.Trip[])(base.EndInvoke("GetTripsForUser", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetPositionNodesForTrip(int tripID, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = tripID;
            System.IAsyncResult _result = base.BeginInvoke("GetPositionNodesForTrip", _args, callback, asyncState);
            return _result;
        }
        
        public TripiWCF.Service.PositionNode[] EndGetPositionNodesForTrip(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            TripiWCF.Service.PositionNode[] _result = ((TripiWCF.Service.PositionNode[])(base.EndInvoke("GetPositionNodesForTrip", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginAddPositionNode(TripiWCF.Service.PositionNode node, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = node;
            System.IAsyncResult _result = base.BeginInvoke("AddPositionNode", _args, callback, asyncState);
            return _result;
        }
        
        public void EndAddPositionNode(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            base.EndInvoke("AddPositionNode", _args, result);
        }
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ICrossDomainPolicyResponder")]
public interface ICrossDomainPolicyResponder
{
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICrossDomainPolicyResponder/GetFlashPolicy", ReplyAction="http://tempuri.org/ICrossDomainPolicyResponder/GetFlashPolicyResponse")]
    System.IAsyncResult BeginGetFlashPolicy(System.AsyncCallback callback, object asyncState);
    
    byte[] EndGetFlashPolicy(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface ICrossDomainPolicyResponderChannel : ICrossDomainPolicyResponder, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class GetFlashPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetFlashPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public byte[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class CrossDomainPolicyResponderClient : System.ServiceModel.ClientBase<ICrossDomainPolicyResponder>, ICrossDomainPolicyResponder
{
    
    private BeginOperationDelegate onBeginGetFlashPolicyDelegate;
    
    private EndOperationDelegate onEndGetFlashPolicyDelegate;
    
    private System.Threading.SendOrPostCallback onGetFlashPolicyCompletedDelegate;
    
    private BeginOperationDelegate onBeginOpenDelegate;
    
    private EndOperationDelegate onEndOpenDelegate;
    
    private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
    
    private BeginOperationDelegate onBeginCloseDelegate;
    
    private EndOperationDelegate onEndCloseDelegate;
    
    private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
    
    public CrossDomainPolicyResponderClient()
    {
    }
    
    public CrossDomainPolicyResponderClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public CrossDomainPolicyResponderClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CrossDomainPolicyResponderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CrossDomainPolicyResponderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Net.CookieContainer CookieContainer
    {
        get
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                return httpCookieContainerManager.CookieContainer;
            }
            else
            {
                return null;
            }
        }
        set
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                httpCookieContainerManager.CookieContainer = value;
            }
            else
            {
                throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                        "ookieContainerBindingElement.");
            }
        }
    }
    
    public event System.EventHandler<GetFlashPolicyCompletedEventArgs> GetFlashPolicyCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult ICrossDomainPolicyResponder.BeginGetFlashPolicy(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetFlashPolicy(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    byte[] ICrossDomainPolicyResponder.EndGetFlashPolicy(System.IAsyncResult result)
    {
        return base.Channel.EndGetFlashPolicy(result);
    }
    
    private System.IAsyncResult OnBeginGetFlashPolicy(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((ICrossDomainPolicyResponder)(this)).BeginGetFlashPolicy(callback, asyncState);
    }
    
    private object[] OnEndGetFlashPolicy(System.IAsyncResult result)
    {
        byte[] retVal = ((ICrossDomainPolicyResponder)(this)).EndGetFlashPolicy(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetFlashPolicyCompleted(object state)
    {
        if ((this.GetFlashPolicyCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetFlashPolicyCompleted(this, new GetFlashPolicyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetFlashPolicyAsync()
    {
        this.GetFlashPolicyAsync(null);
    }
    
    public void GetFlashPolicyAsync(object userState)
    {
        if ((this.onBeginGetFlashPolicyDelegate == null))
        {
            this.onBeginGetFlashPolicyDelegate = new BeginOperationDelegate(this.OnBeginGetFlashPolicy);
        }
        if ((this.onEndGetFlashPolicyDelegate == null))
        {
            this.onEndGetFlashPolicyDelegate = new EndOperationDelegate(this.OnEndGetFlashPolicy);
        }
        if ((this.onGetFlashPolicyCompletedDelegate == null))
        {
            this.onGetFlashPolicyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFlashPolicyCompleted);
        }
        base.InvokeAsync(this.onBeginGetFlashPolicyDelegate, null, this.onEndGetFlashPolicyDelegate, this.onGetFlashPolicyCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
    }
    
    private object[] OnEndOpen(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
        return null;
    }
    
    private void OnOpenCompleted(object state)
    {
        if ((this.OpenCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void OpenAsync()
    {
        this.OpenAsync(null);
    }
    
    public void OpenAsync(object userState)
    {
        if ((this.onBeginOpenDelegate == null))
        {
            this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
        }
        if ((this.onEndOpenDelegate == null))
        {
            this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
        }
        if ((this.onOpenCompletedDelegate == null))
        {
            this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
        }
        base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
    }
    
    private object[] OnEndClose(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
        return null;
    }
    
    private void OnCloseCompleted(object state)
    {
        if ((this.CloseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void CloseAsync()
    {
        this.CloseAsync(null);
    }
    
    public void CloseAsync(object userState)
    {
        if ((this.onBeginCloseDelegate == null))
        {
            this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
        }
        if ((this.onEndCloseDelegate == null))
        {
            this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
        }
        if ((this.onCloseCompletedDelegate == null))
        {
            this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
        }
        base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
    }
    
    protected override ICrossDomainPolicyResponder CreateChannel()
    {
        return new CrossDomainPolicyResponderClientChannel(this);
    }
    
    private class CrossDomainPolicyResponderClientChannel : ChannelBase<ICrossDomainPolicyResponder>, ICrossDomainPolicyResponder
    {
        
        public CrossDomainPolicyResponderClientChannel(System.ServiceModel.ClientBase<ICrossDomainPolicyResponder> client) : 
                base(client)
        {
        }
        
        public System.IAsyncResult BeginGetFlashPolicy(System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[0];
            System.IAsyncResult _result = base.BeginInvoke("GetFlashPolicy", _args, callback, asyncState);
            return _result;
        }
        
        public byte[] EndGetFlashPolicy(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            byte[] _result = ((byte[])(base.EndInvoke("GetFlashPolicy", _args, result)));
            return _result;
        }
    }
}
