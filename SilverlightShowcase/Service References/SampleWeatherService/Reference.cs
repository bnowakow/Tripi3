//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace SilverlightShowcase.SampleWeatherService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.webserviceX.NET", ConfigurationName="SampleWeatherService.GlobalWeatherSoap")]
    public interface GlobalWeatherSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GetWeather", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginGetWeather(string CityName, string CountryName, System.AsyncCallback callback, object asyncState);
        
        string EndGetWeather(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GetCitiesByCountry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginGetCitiesByCountry(string CountryName, System.AsyncCallback callback, object asyncState);
        
        string EndGetCitiesByCountry(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface GlobalWeatherSoapChannel : SilverlightShowcase.SampleWeatherService.GlobalWeatherSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetWeatherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWeatherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetCitiesByCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCitiesByCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GlobalWeatherSoapClient : System.ServiceModel.ClientBase<SilverlightShowcase.SampleWeatherService.GlobalWeatherSoap>, SilverlightShowcase.SampleWeatherService.GlobalWeatherSoap {
        
        private BeginOperationDelegate onBeginGetWeatherDelegate;
        
        private EndOperationDelegate onEndGetWeatherDelegate;
        
        private System.Threading.SendOrPostCallback onGetWeatherCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCitiesByCountryDelegate;
        
        private EndOperationDelegate onEndGetCitiesByCountryDelegate;
        
        private System.Threading.SendOrPostCallback onGetCitiesByCountryCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public GlobalWeatherSoapClient() {
        }
        
        public GlobalWeatherSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GlobalWeatherSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GlobalWeatherSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GlobalWeatherSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetWeatherCompletedEventArgs> GetWeatherCompleted;
        
        public event System.EventHandler<GetCitiesByCountryCompletedEventArgs> GetCitiesByCountryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightShowcase.SampleWeatherService.GlobalWeatherSoap.BeginGetWeather(string CityName, string CountryName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWeather(CityName, CountryName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SilverlightShowcase.SampleWeatherService.GlobalWeatherSoap.EndGetWeather(System.IAsyncResult result) {
            return base.Channel.EndGetWeather(result);
        }
        
        private System.IAsyncResult OnBeginGetWeather(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CityName = ((string)(inValues[0]));
            string CountryName = ((string)(inValues[1]));
            return ((SilverlightShowcase.SampleWeatherService.GlobalWeatherSoap)(this)).BeginGetWeather(CityName, CountryName, callback, asyncState);
        }
        
        private object[] OnEndGetWeather(System.IAsyncResult result) {
            string retVal = ((SilverlightShowcase.SampleWeatherService.GlobalWeatherSoap)(this)).EndGetWeather(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWeatherCompleted(object state) {
            if ((this.GetWeatherCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWeatherCompleted(this, new GetWeatherCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWeatherAsync(string CityName, string CountryName) {
            this.GetWeatherAsync(CityName, CountryName, null);
        }
        
        public void GetWeatherAsync(string CityName, string CountryName, object userState) {
            if ((this.onBeginGetWeatherDelegate == null)) {
                this.onBeginGetWeatherDelegate = new BeginOperationDelegate(this.OnBeginGetWeather);
            }
            if ((this.onEndGetWeatherDelegate == null)) {
                this.onEndGetWeatherDelegate = new EndOperationDelegate(this.OnEndGetWeather);
            }
            if ((this.onGetWeatherCompletedDelegate == null)) {
                this.onGetWeatherCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWeatherCompleted);
            }
            base.InvokeAsync(this.onBeginGetWeatherDelegate, new object[] {
                        CityName,
                        CountryName}, this.onEndGetWeatherDelegate, this.onGetWeatherCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightShowcase.SampleWeatherService.GlobalWeatherSoap.BeginGetCitiesByCountry(string CountryName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCitiesByCountry(CountryName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SilverlightShowcase.SampleWeatherService.GlobalWeatherSoap.EndGetCitiesByCountry(System.IAsyncResult result) {
            return base.Channel.EndGetCitiesByCountry(result);
        }
        
        private System.IAsyncResult OnBeginGetCitiesByCountry(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CountryName = ((string)(inValues[0]));
            return ((SilverlightShowcase.SampleWeatherService.GlobalWeatherSoap)(this)).BeginGetCitiesByCountry(CountryName, callback, asyncState);
        }
        
        private object[] OnEndGetCitiesByCountry(System.IAsyncResult result) {
            string retVal = ((SilverlightShowcase.SampleWeatherService.GlobalWeatherSoap)(this)).EndGetCitiesByCountry(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCitiesByCountryCompleted(object state) {
            if ((this.GetCitiesByCountryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCitiesByCountryCompleted(this, new GetCitiesByCountryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCitiesByCountryAsync(string CountryName) {
            this.GetCitiesByCountryAsync(CountryName, null);
        }
        
        public void GetCitiesByCountryAsync(string CountryName, object userState) {
            if ((this.onBeginGetCitiesByCountryDelegate == null)) {
                this.onBeginGetCitiesByCountryDelegate = new BeginOperationDelegate(this.OnBeginGetCitiesByCountry);
            }
            if ((this.onEndGetCitiesByCountryDelegate == null)) {
                this.onEndGetCitiesByCountryDelegate = new EndOperationDelegate(this.OnEndGetCitiesByCountry);
            }
            if ((this.onGetCitiesByCountryCompletedDelegate == null)) {
                this.onGetCitiesByCountryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCitiesByCountryCompleted);
            }
            base.InvokeAsync(this.onBeginGetCitiesByCountryDelegate, new object[] {
                        CountryName}, this.onEndGetCitiesByCountryDelegate, this.onGetCitiesByCountryCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightShowcase.SampleWeatherService.GlobalWeatherSoap CreateChannel() {
            return new GlobalWeatherSoapClientChannel(this);
        }
        
        private class GlobalWeatherSoapClientChannel : ChannelBase<SilverlightShowcase.SampleWeatherService.GlobalWeatherSoap>, SilverlightShowcase.SampleWeatherService.GlobalWeatherSoap {
            
            public GlobalWeatherSoapClientChannel(System.ServiceModel.ClientBase<SilverlightShowcase.SampleWeatherService.GlobalWeatherSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetWeather(string CityName, string CountryName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = CityName;
                _args[1] = CountryName;
                System.IAsyncResult _result = base.BeginInvoke("GetWeather", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetWeather(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetWeather", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCitiesByCountry(string CountryName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = CountryName;
                System.IAsyncResult _result = base.BeginInvoke("GetCitiesByCountry", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetCitiesByCountry(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetCitiesByCountry", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.webserviceX.NET", ConfigurationName="SampleWeatherService.GlobalWeatherHttpGet")]
    public interface GlobalWeatherHttpGet {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GlobalWeatherHttpGet/GetWeatherRequest", ReplyAction="http://www.webserviceX.NET/GlobalWeatherHttpGet/GetWeatherResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginGetWeather(SilverlightShowcase.SampleWeatherService.GetWeatherRequest request, System.AsyncCallback callback, object asyncState);
        
        SilverlightShowcase.SampleWeatherService.GetWeatherResponse EndGetWeather(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GlobalWeatherHttpGet/GetCitiesByCountryRequest", ReplyAction="http://www.webserviceX.NET/GlobalWeatherHttpGet/GetCitiesByCountryResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginGetCitiesByCountry(SilverlightShowcase.SampleWeatherService.GetCitiesByCountryRequest request, System.AsyncCallback callback, object asyncState);
        
        SilverlightShowcase.SampleWeatherService.GetCitiesByCountryResponse EndGetCitiesByCountry(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetWeatherRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string CityName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string CountryName;
        
        public GetWeatherRequest() {
        }
        
        public GetWeatherRequest(string CityName, string CountryName) {
            this.CityName = CityName;
            this.CountryName = CountryName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetWeatherResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.webserviceX.NET", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string @string;
        
        public GetWeatherResponse() {
        }
        
        public GetWeatherResponse(string @string) {
            this.@string = @string;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetCitiesByCountryRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string CountryName;
        
        public GetCitiesByCountryRequest() {
        }
        
        public GetCitiesByCountryRequest(string CountryName) {
            this.CountryName = CountryName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetCitiesByCountryResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.webserviceX.NET", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string @string;
        
        public GetCitiesByCountryResponse() {
        }
        
        public GetCitiesByCountryResponse(string @string) {
            this.@string = @string;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface GlobalWeatherHttpGetChannel : SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpGet, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetWeatherCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWeatherCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetCitiesByCountryCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCitiesByCountryCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GlobalWeatherHttpGetClient : System.ServiceModel.ClientBase<SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpGet>, SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpGet {
        
        private BeginOperationDelegate onBeginGetWeatherDelegate;
        
        private EndOperationDelegate onEndGetWeatherDelegate;
        
        private System.Threading.SendOrPostCallback onGetWeatherCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCitiesByCountryDelegate;
        
        private EndOperationDelegate onEndGetCitiesByCountryDelegate;
        
        private System.Threading.SendOrPostCallback onGetCitiesByCountryCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public GlobalWeatherHttpGetClient() {
        }
        
        public GlobalWeatherHttpGetClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GlobalWeatherHttpGetClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GlobalWeatherHttpGetClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GlobalWeatherHttpGetClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetWeatherCompletedEventArgs1> GetWeatherCompleted;
        
        public event System.EventHandler<GetCitiesByCountryCompletedEventArgs1> GetCitiesByCountryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpGet.BeginGetWeather(SilverlightShowcase.SampleWeatherService.GetWeatherRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWeather(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetWeather(string CityName, string CountryName, System.AsyncCallback callback, object asyncState) {
            SilverlightShowcase.SampleWeatherService.GetWeatherRequest inValue = new SilverlightShowcase.SampleWeatherService.GetWeatherRequest();
            inValue.CityName = CityName;
            inValue.CountryName = CountryName;
            return ((SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpGet)(this)).BeginGetWeather(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightShowcase.SampleWeatherService.GetWeatherResponse SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpGet.EndGetWeather(System.IAsyncResult result) {
            return base.Channel.EndGetWeather(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private string EndGetWeather(System.IAsyncResult result) {
            SilverlightShowcase.SampleWeatherService.GetWeatherResponse retVal = ((SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpGet)(this)).EndGetWeather(result);
            return retVal.@string;
        }
        
        private System.IAsyncResult OnBeginGetWeather(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CityName = ((string)(inValues[0]));
            string CountryName = ((string)(inValues[1]));
            return this.BeginGetWeather(CityName, CountryName, callback, asyncState);
        }
        
        private object[] OnEndGetWeather(System.IAsyncResult result) {
            string retVal = this.EndGetWeather(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWeatherCompleted(object state) {
            if ((this.GetWeatherCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWeatherCompleted(this, new GetWeatherCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWeatherAsync(string CityName, string CountryName) {
            this.GetWeatherAsync(CityName, CountryName, null);
        }
        
        public void GetWeatherAsync(string CityName, string CountryName, object userState) {
            if ((this.onBeginGetWeatherDelegate == null)) {
                this.onBeginGetWeatherDelegate = new BeginOperationDelegate(this.OnBeginGetWeather);
            }
            if ((this.onEndGetWeatherDelegate == null)) {
                this.onEndGetWeatherDelegate = new EndOperationDelegate(this.OnEndGetWeather);
            }
            if ((this.onGetWeatherCompletedDelegate == null)) {
                this.onGetWeatherCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWeatherCompleted);
            }
            base.InvokeAsync(this.onBeginGetWeatherDelegate, new object[] {
                        CityName,
                        CountryName}, this.onEndGetWeatherDelegate, this.onGetWeatherCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpGet.BeginGetCitiesByCountry(SilverlightShowcase.SampleWeatherService.GetCitiesByCountryRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCitiesByCountry(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetCitiesByCountry(string CountryName, System.AsyncCallback callback, object asyncState) {
            SilverlightShowcase.SampleWeatherService.GetCitiesByCountryRequest inValue = new SilverlightShowcase.SampleWeatherService.GetCitiesByCountryRequest();
            inValue.CountryName = CountryName;
            return ((SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpGet)(this)).BeginGetCitiesByCountry(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightShowcase.SampleWeatherService.GetCitiesByCountryResponse SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpGet.EndGetCitiesByCountry(System.IAsyncResult result) {
            return base.Channel.EndGetCitiesByCountry(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private string EndGetCitiesByCountry(System.IAsyncResult result) {
            SilverlightShowcase.SampleWeatherService.GetCitiesByCountryResponse retVal = ((SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpGet)(this)).EndGetCitiesByCountry(result);
            return retVal.@string;
        }
        
        private System.IAsyncResult OnBeginGetCitiesByCountry(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CountryName = ((string)(inValues[0]));
            return this.BeginGetCitiesByCountry(CountryName, callback, asyncState);
        }
        
        private object[] OnEndGetCitiesByCountry(System.IAsyncResult result) {
            string retVal = this.EndGetCitiesByCountry(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCitiesByCountryCompleted(object state) {
            if ((this.GetCitiesByCountryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCitiesByCountryCompleted(this, new GetCitiesByCountryCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCitiesByCountryAsync(string CountryName) {
            this.GetCitiesByCountryAsync(CountryName, null);
        }
        
        public void GetCitiesByCountryAsync(string CountryName, object userState) {
            if ((this.onBeginGetCitiesByCountryDelegate == null)) {
                this.onBeginGetCitiesByCountryDelegate = new BeginOperationDelegate(this.OnBeginGetCitiesByCountry);
            }
            if ((this.onEndGetCitiesByCountryDelegate == null)) {
                this.onEndGetCitiesByCountryDelegate = new EndOperationDelegate(this.OnEndGetCitiesByCountry);
            }
            if ((this.onGetCitiesByCountryCompletedDelegate == null)) {
                this.onGetCitiesByCountryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCitiesByCountryCompleted);
            }
            base.InvokeAsync(this.onBeginGetCitiesByCountryDelegate, new object[] {
                        CountryName}, this.onEndGetCitiesByCountryDelegate, this.onGetCitiesByCountryCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpGet CreateChannel() {
            return new GlobalWeatherHttpGetClientChannel(this);
        }
        
        private class GlobalWeatherHttpGetClientChannel : ChannelBase<SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpGet>, SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpGet {
            
            public GlobalWeatherHttpGetClientChannel(System.ServiceModel.ClientBase<SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpGet> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetWeather(SilverlightShowcase.SampleWeatherService.GetWeatherRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetWeather", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightShowcase.SampleWeatherService.GetWeatherResponse EndGetWeather(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightShowcase.SampleWeatherService.GetWeatherResponse _result = ((SilverlightShowcase.SampleWeatherService.GetWeatherResponse)(base.EndInvoke("GetWeather", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCitiesByCountry(SilverlightShowcase.SampleWeatherService.GetCitiesByCountryRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetCitiesByCountry", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightShowcase.SampleWeatherService.GetCitiesByCountryResponse EndGetCitiesByCountry(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightShowcase.SampleWeatherService.GetCitiesByCountryResponse _result = ((SilverlightShowcase.SampleWeatherService.GetCitiesByCountryResponse)(base.EndInvoke("GetCitiesByCountry", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.webserviceX.NET", ConfigurationName="SampleWeatherService.GlobalWeatherHttpPost")]
    public interface GlobalWeatherHttpPost {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GlobalWeatherHttpPost/GetWeatherRequest", ReplyAction="http://www.webserviceX.NET/GlobalWeatherHttpPost/GetWeatherResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginGetWeather(SilverlightShowcase.SampleWeatherService.GetWeatherRequest1 request, System.AsyncCallback callback, object asyncState);
        
        SilverlightShowcase.SampleWeatherService.GetWeatherResponse1 EndGetWeather(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GlobalWeatherHttpPost/GetCitiesByCountryRequest", ReplyAction="http://www.webserviceX.NET/GlobalWeatherHttpPost/GetCitiesByCountryResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginGetCitiesByCountry(SilverlightShowcase.SampleWeatherService.GetCitiesByCountryRequest1 request, System.AsyncCallback callback, object asyncState);
        
        SilverlightShowcase.SampleWeatherService.GetCitiesByCountryResponse1 EndGetCitiesByCountry(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetWeatherRequest1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string CityName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string CountryName;
        
        public GetWeatherRequest1() {
        }
        
        public GetWeatherRequest1(string CityName, string CountryName) {
            this.CityName = CityName;
            this.CountryName = CountryName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetWeatherResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.webserviceX.NET", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string @string;
        
        public GetWeatherResponse1() {
        }
        
        public GetWeatherResponse1(string @string) {
            this.@string = @string;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetCitiesByCountryRequest1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string CountryName;
        
        public GetCitiesByCountryRequest1() {
        }
        
        public GetCitiesByCountryRequest1(string CountryName) {
            this.CountryName = CountryName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetCitiesByCountryResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.webserviceX.NET", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string @string;
        
        public GetCitiesByCountryResponse1() {
        }
        
        public GetCitiesByCountryResponse1(string @string) {
            this.@string = @string;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface GlobalWeatherHttpPostChannel : SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpPost, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetWeatherCompletedEventArgs2 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWeatherCompletedEventArgs2(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetCitiesByCountryCompletedEventArgs2 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCitiesByCountryCompletedEventArgs2(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GlobalWeatherHttpPostClient : System.ServiceModel.ClientBase<SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpPost>, SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpPost {
        
        private BeginOperationDelegate onBeginGetWeatherDelegate;
        
        private EndOperationDelegate onEndGetWeatherDelegate;
        
        private System.Threading.SendOrPostCallback onGetWeatherCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCitiesByCountryDelegate;
        
        private EndOperationDelegate onEndGetCitiesByCountryDelegate;
        
        private System.Threading.SendOrPostCallback onGetCitiesByCountryCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public GlobalWeatherHttpPostClient() {
        }
        
        public GlobalWeatherHttpPostClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GlobalWeatherHttpPostClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GlobalWeatherHttpPostClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GlobalWeatherHttpPostClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetWeatherCompletedEventArgs2> GetWeatherCompleted;
        
        public event System.EventHandler<GetCitiesByCountryCompletedEventArgs2> GetCitiesByCountryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpPost.BeginGetWeather(SilverlightShowcase.SampleWeatherService.GetWeatherRequest1 request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWeather(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetWeather(string CityName, string CountryName, System.AsyncCallback callback, object asyncState) {
            SilverlightShowcase.SampleWeatherService.GetWeatherRequest1 inValue = new SilverlightShowcase.SampleWeatherService.GetWeatherRequest1();
            inValue.CityName = CityName;
            inValue.CountryName = CountryName;
            return ((SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpPost)(this)).BeginGetWeather(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightShowcase.SampleWeatherService.GetWeatherResponse1 SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpPost.EndGetWeather(System.IAsyncResult result) {
            return base.Channel.EndGetWeather(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private string EndGetWeather(System.IAsyncResult result) {
            SilverlightShowcase.SampleWeatherService.GetWeatherResponse1 retVal = ((SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpPost)(this)).EndGetWeather(result);
            return retVal.@string;
        }
        
        private System.IAsyncResult OnBeginGetWeather(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CityName = ((string)(inValues[0]));
            string CountryName = ((string)(inValues[1]));
            return this.BeginGetWeather(CityName, CountryName, callback, asyncState);
        }
        
        private object[] OnEndGetWeather(System.IAsyncResult result) {
            string retVal = this.EndGetWeather(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWeatherCompleted(object state) {
            if ((this.GetWeatherCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWeatherCompleted(this, new GetWeatherCompletedEventArgs2(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWeatherAsync(string CityName, string CountryName) {
            this.GetWeatherAsync(CityName, CountryName, null);
        }
        
        public void GetWeatherAsync(string CityName, string CountryName, object userState) {
            if ((this.onBeginGetWeatherDelegate == null)) {
                this.onBeginGetWeatherDelegate = new BeginOperationDelegate(this.OnBeginGetWeather);
            }
            if ((this.onEndGetWeatherDelegate == null)) {
                this.onEndGetWeatherDelegate = new EndOperationDelegate(this.OnEndGetWeather);
            }
            if ((this.onGetWeatherCompletedDelegate == null)) {
                this.onGetWeatherCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWeatherCompleted);
            }
            base.InvokeAsync(this.onBeginGetWeatherDelegate, new object[] {
                        CityName,
                        CountryName}, this.onEndGetWeatherDelegate, this.onGetWeatherCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpPost.BeginGetCitiesByCountry(SilverlightShowcase.SampleWeatherService.GetCitiesByCountryRequest1 request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCitiesByCountry(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetCitiesByCountry(string CountryName, System.AsyncCallback callback, object asyncState) {
            SilverlightShowcase.SampleWeatherService.GetCitiesByCountryRequest1 inValue = new SilverlightShowcase.SampleWeatherService.GetCitiesByCountryRequest1();
            inValue.CountryName = CountryName;
            return ((SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpPost)(this)).BeginGetCitiesByCountry(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SilverlightShowcase.SampleWeatherService.GetCitiesByCountryResponse1 SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpPost.EndGetCitiesByCountry(System.IAsyncResult result) {
            return base.Channel.EndGetCitiesByCountry(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private string EndGetCitiesByCountry(System.IAsyncResult result) {
            SilverlightShowcase.SampleWeatherService.GetCitiesByCountryResponse1 retVal = ((SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpPost)(this)).EndGetCitiesByCountry(result);
            return retVal.@string;
        }
        
        private System.IAsyncResult OnBeginGetCitiesByCountry(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CountryName = ((string)(inValues[0]));
            return this.BeginGetCitiesByCountry(CountryName, callback, asyncState);
        }
        
        private object[] OnEndGetCitiesByCountry(System.IAsyncResult result) {
            string retVal = this.EndGetCitiesByCountry(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCitiesByCountryCompleted(object state) {
            if ((this.GetCitiesByCountryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCitiesByCountryCompleted(this, new GetCitiesByCountryCompletedEventArgs2(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCitiesByCountryAsync(string CountryName) {
            this.GetCitiesByCountryAsync(CountryName, null);
        }
        
        public void GetCitiesByCountryAsync(string CountryName, object userState) {
            if ((this.onBeginGetCitiesByCountryDelegate == null)) {
                this.onBeginGetCitiesByCountryDelegate = new BeginOperationDelegate(this.OnBeginGetCitiesByCountry);
            }
            if ((this.onEndGetCitiesByCountryDelegate == null)) {
                this.onEndGetCitiesByCountryDelegate = new EndOperationDelegate(this.OnEndGetCitiesByCountry);
            }
            if ((this.onGetCitiesByCountryCompletedDelegate == null)) {
                this.onGetCitiesByCountryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCitiesByCountryCompleted);
            }
            base.InvokeAsync(this.onBeginGetCitiesByCountryDelegate, new object[] {
                        CountryName}, this.onEndGetCitiesByCountryDelegate, this.onGetCitiesByCountryCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpPost CreateChannel() {
            return new GlobalWeatherHttpPostClientChannel(this);
        }
        
        private class GlobalWeatherHttpPostClientChannel : ChannelBase<SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpPost>, SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpPost {
            
            public GlobalWeatherHttpPostClientChannel(System.ServiceModel.ClientBase<SilverlightShowcase.SampleWeatherService.GlobalWeatherHttpPost> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetWeather(SilverlightShowcase.SampleWeatherService.GetWeatherRequest1 request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetWeather", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightShowcase.SampleWeatherService.GetWeatherResponse1 EndGetWeather(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightShowcase.SampleWeatherService.GetWeatherResponse1 _result = ((SilverlightShowcase.SampleWeatherService.GetWeatherResponse1)(base.EndInvoke("GetWeather", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCitiesByCountry(SilverlightShowcase.SampleWeatherService.GetCitiesByCountryRequest1 request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetCitiesByCountry", _args, callback, asyncState);
                return _result;
            }
            
            public SilverlightShowcase.SampleWeatherService.GetCitiesByCountryResponse1 EndGetCitiesByCountry(System.IAsyncResult result) {
                object[] _args = new object[0];
                SilverlightShowcase.SampleWeatherService.GetCitiesByCountryResponse1 _result = ((SilverlightShowcase.SampleWeatherService.GetCitiesByCountryResponse1)(base.EndInvoke("GetCitiesByCountry", _args, result)));
                return _result;
            }
        }
    }
}
