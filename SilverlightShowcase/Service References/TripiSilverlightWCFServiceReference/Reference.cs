//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace SilverlightShowcase.TripiSilverlightWCFServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Trip", Namespace="http://schemas.datacontract.org/2004/07/TripiWCF.Service")]
    public partial class Trip : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IDField;
        
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PositionNode", Namespace="http://schemas.datacontract.org/2004/07/TripiWCF.Service")]
    public partial class PositionNode : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime CreationTimeField;
        
        private double LatitudeField;
        
        private double LongitudeField;
        
        private int TripIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationTime {
            get {
                return this.CreationTimeField;
            }
            set {
                if ((this.CreationTimeField.Equals(value) != true)) {
                    this.CreationTimeField = value;
                    this.RaisePropertyChanged("CreationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TripID {
            get {
                return this.TripIDField;
            }
            set {
                if ((this.TripIDField.Equals(value) != true)) {
                    this.TripIDField = value;
                    this.RaisePropertyChanged("TripID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="TripiSilverlightWCFServiceReference.TripiSilverlightWCFService")]
    public interface TripiSilverlightWCFService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TripiSilverlightWCFService/CreateNewTrip", ReplyAction="urn:TripiSilverlightWCFService/CreateNewTripResponse")]
        System.IAsyncResult BeginCreateNewTrip(string username, System.AsyncCallback callback, object asyncState);
        
        int EndCreateNewTrip(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TripiSilverlightWCFService/GetTripsForUser", ReplyAction="urn:TripiSilverlightWCFService/GetTripsForUserResponse")]
        System.IAsyncResult BeginGetTripsForUser(string username, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightShowcase.TripiSilverlightWCFServiceReference.Trip> EndGetTripsForUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TripiSilverlightWCFService/GetPositionNodesForTrip", ReplyAction="urn:TripiSilverlightWCFService/GetPositionNodesForTripResponse")]
        System.IAsyncResult BeginGetPositionNodesForTrip(int tripID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightShowcase.TripiSilverlightWCFServiceReference.PositionNode> EndGetPositionNodesForTrip(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:TripiSilverlightWCFService/AddPositionNode", ReplyAction="urn:TripiSilverlightWCFService/AddPositionNodeResponse")]
        System.IAsyncResult BeginAddPositionNode(SilverlightShowcase.TripiSilverlightWCFServiceReference.PositionNode node, System.AsyncCallback callback, object asyncState);
        
        void EndAddPositionNode(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface TripiSilverlightWCFServiceChannel : SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class CreateNewTripCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateNewTripCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetTripsForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTripsForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightShowcase.TripiSilverlightWCFServiceReference.Trip> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightShowcase.TripiSilverlightWCFServiceReference.Trip>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetPositionNodesForTripCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPositionNodesForTripCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightShowcase.TripiSilverlightWCFServiceReference.PositionNode> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightShowcase.TripiSilverlightWCFServiceReference.PositionNode>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class TripiSilverlightWCFServiceClient : System.ServiceModel.ClientBase<SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService>, SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService {
        
        private BeginOperationDelegate onBeginCreateNewTripDelegate;
        
        private EndOperationDelegate onEndCreateNewTripDelegate;
        
        private System.Threading.SendOrPostCallback onCreateNewTripCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTripsForUserDelegate;
        
        private EndOperationDelegate onEndGetTripsForUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetTripsForUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPositionNodesForTripDelegate;
        
        private EndOperationDelegate onEndGetPositionNodesForTripDelegate;
        
        private System.Threading.SendOrPostCallback onGetPositionNodesForTripCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddPositionNodeDelegate;
        
        private EndOperationDelegate onEndAddPositionNodeDelegate;
        
        private System.Threading.SendOrPostCallback onAddPositionNodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TripiSilverlightWCFServiceClient() {
        }
        
        public TripiSilverlightWCFServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TripiSilverlightWCFServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TripiSilverlightWCFServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TripiSilverlightWCFServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<CreateNewTripCompletedEventArgs> CreateNewTripCompleted;
        
        public event System.EventHandler<GetTripsForUserCompletedEventArgs> GetTripsForUserCompleted;
        
        public event System.EventHandler<GetPositionNodesForTripCompletedEventArgs> GetPositionNodesForTripCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddPositionNodeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService.BeginCreateNewTrip(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateNewTrip(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService.EndCreateNewTrip(System.IAsyncResult result) {
            return base.Channel.EndCreateNewTrip(result);
        }
        
        private System.IAsyncResult OnBeginCreateNewTrip(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            return ((SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService)(this)).BeginCreateNewTrip(username, callback, asyncState);
        }
        
        private object[] OnEndCreateNewTrip(System.IAsyncResult result) {
            int retVal = ((SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService)(this)).EndCreateNewTrip(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateNewTripCompleted(object state) {
            if ((this.CreateNewTripCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateNewTripCompleted(this, new CreateNewTripCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateNewTripAsync(string username) {
            this.CreateNewTripAsync(username, null);
        }
        
        public void CreateNewTripAsync(string username, object userState) {
            if ((this.onBeginCreateNewTripDelegate == null)) {
                this.onBeginCreateNewTripDelegate = new BeginOperationDelegate(this.OnBeginCreateNewTrip);
            }
            if ((this.onEndCreateNewTripDelegate == null)) {
                this.onEndCreateNewTripDelegate = new EndOperationDelegate(this.OnEndCreateNewTrip);
            }
            if ((this.onCreateNewTripCompletedDelegate == null)) {
                this.onCreateNewTripCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateNewTripCompleted);
            }
            base.InvokeAsync(this.onBeginCreateNewTripDelegate, new object[] {
                        username}, this.onEndCreateNewTripDelegate, this.onCreateNewTripCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService.BeginGetTripsForUser(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTripsForUser(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightShowcase.TripiSilverlightWCFServiceReference.Trip> SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService.EndGetTripsForUser(System.IAsyncResult result) {
            return base.Channel.EndGetTripsForUser(result);
        }
        
        private System.IAsyncResult OnBeginGetTripsForUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            return ((SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService)(this)).BeginGetTripsForUser(username, callback, asyncState);
        }
        
        private object[] OnEndGetTripsForUser(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightShowcase.TripiSilverlightWCFServiceReference.Trip> retVal = ((SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService)(this)).EndGetTripsForUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTripsForUserCompleted(object state) {
            if ((this.GetTripsForUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTripsForUserCompleted(this, new GetTripsForUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTripsForUserAsync(string username) {
            this.GetTripsForUserAsync(username, null);
        }
        
        public void GetTripsForUserAsync(string username, object userState) {
            if ((this.onBeginGetTripsForUserDelegate == null)) {
                this.onBeginGetTripsForUserDelegate = new BeginOperationDelegate(this.OnBeginGetTripsForUser);
            }
            if ((this.onEndGetTripsForUserDelegate == null)) {
                this.onEndGetTripsForUserDelegate = new EndOperationDelegate(this.OnEndGetTripsForUser);
            }
            if ((this.onGetTripsForUserCompletedDelegate == null)) {
                this.onGetTripsForUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTripsForUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetTripsForUserDelegate, new object[] {
                        username}, this.onEndGetTripsForUserDelegate, this.onGetTripsForUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService.BeginGetPositionNodesForTrip(int tripID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPositionNodesForTrip(tripID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightShowcase.TripiSilverlightWCFServiceReference.PositionNode> SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService.EndGetPositionNodesForTrip(System.IAsyncResult result) {
            return base.Channel.EndGetPositionNodesForTrip(result);
        }
        
        private System.IAsyncResult OnBeginGetPositionNodesForTrip(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int tripID = ((int)(inValues[0]));
            return ((SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService)(this)).BeginGetPositionNodesForTrip(tripID, callback, asyncState);
        }
        
        private object[] OnEndGetPositionNodesForTrip(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightShowcase.TripiSilverlightWCFServiceReference.PositionNode> retVal = ((SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService)(this)).EndGetPositionNodesForTrip(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPositionNodesForTripCompleted(object state) {
            if ((this.GetPositionNodesForTripCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPositionNodesForTripCompleted(this, new GetPositionNodesForTripCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPositionNodesForTripAsync(int tripID) {
            this.GetPositionNodesForTripAsync(tripID, null);
        }
        
        public void GetPositionNodesForTripAsync(int tripID, object userState) {
            if ((this.onBeginGetPositionNodesForTripDelegate == null)) {
                this.onBeginGetPositionNodesForTripDelegate = new BeginOperationDelegate(this.OnBeginGetPositionNodesForTrip);
            }
            if ((this.onEndGetPositionNodesForTripDelegate == null)) {
                this.onEndGetPositionNodesForTripDelegate = new EndOperationDelegate(this.OnEndGetPositionNodesForTrip);
            }
            if ((this.onGetPositionNodesForTripCompletedDelegate == null)) {
                this.onGetPositionNodesForTripCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPositionNodesForTripCompleted);
            }
            base.InvokeAsync(this.onBeginGetPositionNodesForTripDelegate, new object[] {
                        tripID}, this.onEndGetPositionNodesForTripDelegate, this.onGetPositionNodesForTripCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService.BeginAddPositionNode(SilverlightShowcase.TripiSilverlightWCFServiceReference.PositionNode node, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddPositionNode(node, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService.EndAddPositionNode(System.IAsyncResult result) {
            base.Channel.EndAddPositionNode(result);
        }
        
        private System.IAsyncResult OnBeginAddPositionNode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SilverlightShowcase.TripiSilverlightWCFServiceReference.PositionNode node = ((SilverlightShowcase.TripiSilverlightWCFServiceReference.PositionNode)(inValues[0]));
            return ((SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService)(this)).BeginAddPositionNode(node, callback, asyncState);
        }
        
        private object[] OnEndAddPositionNode(System.IAsyncResult result) {
            ((SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService)(this)).EndAddPositionNode(result);
            return null;
        }
        
        private void OnAddPositionNodeCompleted(object state) {
            if ((this.AddPositionNodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddPositionNodeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddPositionNodeAsync(SilverlightShowcase.TripiSilverlightWCFServiceReference.PositionNode node) {
            this.AddPositionNodeAsync(node, null);
        }
        
        public void AddPositionNodeAsync(SilverlightShowcase.TripiSilverlightWCFServiceReference.PositionNode node, object userState) {
            if ((this.onBeginAddPositionNodeDelegate == null)) {
                this.onBeginAddPositionNodeDelegate = new BeginOperationDelegate(this.OnBeginAddPositionNode);
            }
            if ((this.onEndAddPositionNodeDelegate == null)) {
                this.onEndAddPositionNodeDelegate = new EndOperationDelegate(this.OnEndAddPositionNode);
            }
            if ((this.onAddPositionNodeCompletedDelegate == null)) {
                this.onAddPositionNodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddPositionNodeCompleted);
            }
            base.InvokeAsync(this.onBeginAddPositionNodeDelegate, new object[] {
                        node}, this.onEndAddPositionNodeDelegate, this.onAddPositionNodeCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService CreateChannel() {
            return new TripiSilverlightWCFServiceClientChannel(this);
        }
        
        private class TripiSilverlightWCFServiceClientChannel : ChannelBase<SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService>, SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService {
            
            public TripiSilverlightWCFServiceClientChannel(System.ServiceModel.ClientBase<SilverlightShowcase.TripiSilverlightWCFServiceReference.TripiSilverlightWCFService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCreateNewTrip(string username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = username;
                System.IAsyncResult _result = base.BeginInvoke("CreateNewTrip", _args, callback, asyncState);
                return _result;
            }
            
            public int EndCreateNewTrip(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("CreateNewTrip", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTripsForUser(string username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = username;
                System.IAsyncResult _result = base.BeginInvoke("GetTripsForUser", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightShowcase.TripiSilverlightWCFServiceReference.Trip> EndGetTripsForUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightShowcase.TripiSilverlightWCFServiceReference.Trip> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightShowcase.TripiSilverlightWCFServiceReference.Trip>)(base.EndInvoke("GetTripsForUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPositionNodesForTrip(int tripID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = tripID;
                System.IAsyncResult _result = base.BeginInvoke("GetPositionNodesForTrip", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightShowcase.TripiSilverlightWCFServiceReference.PositionNode> EndGetPositionNodesForTrip(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightShowcase.TripiSilverlightWCFServiceReference.PositionNode> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightShowcase.TripiSilverlightWCFServiceReference.PositionNode>)(base.EndInvoke("GetPositionNodesForTrip", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddPositionNode(SilverlightShowcase.TripiSilverlightWCFServiceReference.PositionNode node, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = node;
                System.IAsyncResult _result = base.BeginInvoke("AddPositionNode", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddPositionNode(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddPositionNode", _args, result);
            }
        }
    }
}
